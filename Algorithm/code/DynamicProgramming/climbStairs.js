// 题目：假设楼梯有n个台阶，每次可以走1个或2个台阶，请问走完这n个台阶有几种走法？
// 动态规划
// 需要满足3个条件：
// 1. 最优子问题: f(10) = f(9) + f(8) 就是f(10)问题的最优子问题，如果求出f(9)和f(8)的最优子问题，那么就是f(10)的最优子问题了
// 2. 边界问题：动态规划是自顶向下的设计思想，以爬楼梯为例，最后分解到底层的边界条件就是f(1) = 1, f(2) = 2
// 3. 状态转移方程: 是描述数学问题的数学方程式

export default function climbStairs(n) {
  let val = []
  for (let i = 0; i <= n; i++) {
    val[i] = 0
  }
  if (n <= 2) {
    return n
  } else {
    val[1] = 1
    val[2] = 2
    for (let i = 3; i <= n; i++) {
      val[i] = val[i - 1] + val[i - 2]
    }
    return val[n]
  }

}

// 动态规划与递归
// 1. 动态规划本质上不是递归，甚至可以理解是和递归相反的一种算法设计思想
// 2. 递归是自顶向下的，从顶部开始分解问题，然后通过解决分解出的小问题，从而解决出整个问题
// 3. 动态规划是自底向上的，从底部开始解决问题，按照顺序一步步扩大问题的规模从而去解决整个问题