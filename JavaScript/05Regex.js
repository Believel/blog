// 正则表达式字面量
const reg = /ab+c/
//  RegExp 对象的构造器
const reg2 = new RegExp("ab+c")
// ^ 匹配输入的开始
// $ 匹配输入的结束
// * 匹配前一个表达式0次或多次
// + 匹配前面一个表达式 1 次或者多次，等价于 {1,}

// ? 匹配前面一个表达式 0 次或者 1 次，等价于 {0,1} ,例如 /e?le/
// . 默认匹配除换行符之外的任何单个字符
// (x) 匹配‘x’并且记住匹配项，其中括号被称为捕获括号
//!   (?:x) 匹配 'x' 但是不记住匹配项。这种括号叫做非捕获括号，使得你能够定义与正则表达式运算符一起使用的子表达式。
//!   x(?=y) 匹配‘x’ 仅仅当 ‘x’ 后面跟着'y'.这种叫做先行断言
//! (?<=y)x  匹配 ‘x’ 仅当 'x'前面是 'y'.这种叫做后行断言
// x(?!y) 

// x|y 匹配 'x' 或者 'y'
// {n} 匹配前面一个字符刚好出现了 n 次
// {n,} 匹配前面一个字符至少出现 n 次
// {n,m} 匹配前面的字符至少 n 次，最多m次
// [xyz] 一个字符集合。匹配方括号中的任意字符，包括转义字符
// [^xyz] 一个反向字符集。也就是说，它匹配任何没有包含在方括号中的字符
// \b 匹配一个词的边界。一个词的边界就是一个词不被另外一个“字”字符跟随的位置或者前面跟其他“字”字符的位置，例如在字母和空格之间
// \B 匹配一个非单词边界 
// \d 匹配一个数字。 等价于[0-9]
// \D 匹配一个非数字字符。 等价于[^0-9]
// \s 匹配一个空白字符，包括空格、制表符、换行符和换页符
// \S 匹配一个非空白字符
// \w 匹配一个单字字符(字母、数字或者下划线) [a-zA-Z0-9_]
// \W 匹配一个非单字字符 [^a-zA-Z0-9_]
// ! \n 在正则表达式中，它返回最后的第n个子捕获匹配的子字符串（捕获的数目以左括号计数）

// 方法
// const str = 'xxabccccabc'
// console.log(reg.exec(str)) // 返回一个数组或者null

// console.log(reg.test(str));

// console.log(str.match(reg)) // 返回一个数组

// 正则表达式标志
// g 全局搜索
// i 不区分大小写搜索
// m 多行搜索




